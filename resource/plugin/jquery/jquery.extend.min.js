;(function(_, $, undefined){

/* !!
 * Constant
 * ** *** **** ***** **** *** ** *
 */
$.extend({

	// 环境信息
	ua: _.navigator.userAgent.toLowerCase(),

	// 根
	root: function( loc, project ){
		return _.root || loc.protocol + '//' + ( loc.host || (loc.hostname + ':' + loc.port) ) + project;
	}( $.loc = _.location, _.project ),

	// 路由
	path: $.loc.pathname.replace(/\.(.*)/, '').match(/\w+/g) || [],

	// 参数
	param: function( param ){

		var result = {};

		if( param ){

			$.each( param.split('&'), function(i, p){

				!function( p ){
					result[ p[0] ] = p[1] || '';
				}( p.split('=') );

			});

		}

		return result;

	}( $.loc.search.toLowerCase().substr(1) ),

	// 事件集
	evt: function( evts ){
		var json = {};
		return $.each( evts, function(i, e){ json[ e ] = e }), json;
	}(
		(
			'blur focus focusin focusout load resize scroll unload click dblclick ' +
			'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' +
			'change select submit keydown keypress keyup error contextmenu'
		).split(' ')
	),

	// 对象集
	dom: {
		window:   $(_)
	  ,	document: $(_.document)
	  ,	body:     $(_.document.body)
	  , head:     $('head')
	}

	// Constant End
});


/* !!
 * Core
 * ** *** **** ***** **** *** ** *
 */
$.extend({

	// JS错误调试
	console: function( obj ){

		var
			// 信息内容
			info  = '',
			// 调试板
			board = function( board ){

				return board.length ? board : $('<pre></pre>')
					.addClass('fixed z-max').css({
						padding: 5,
						borderRadius: 5,
						color: 'black',
						background: 'rgba(255, 255, 255, .75)',
						border: '1px solid gray'
					}).addClass('console z-max screen-max over-auto').appendTo( $.dom.body );

			}( $('pre.console') );

		$.each(obj, function(i, prop){
			info += i + ': ' + prop + '\n';
		});

		board.html( info );
	},

	// Js Error Log
	log: function(){

		_.onerror = function(msg, url, line){

			$.console({
				msg: msg,
				url: url,
				line: line
			});

			return true;
		}
	},

	// 检测环境
	monitor: function( type ){

		var
			// 预置结果
			result = false,
			// 检测
			exp = function( reg ){
				return new RegExp( reg ).exec( $.ua );
			};

		if( type ){

			// 神快捷: 微信
			if( type == 'weixin' ){
				result = exp('micromessenger');

				// 使用微信JS.API校验
				if( !result ){

					try{
						// 非微信运行不能
						wx.checkJsApi({
							jsApiList: ['ready'],
							success: function( res ){
								$.isWeixin = !!res;
							}
						});
					}
					catch(e){
						console.log(e);
					}

				}

				return !!result;
			}

			// 快捷
			if( ~$.inArray( type, 'iphone,ipad,mac,android,windows mobile'.split(',') ) ){
				result = exp( type );
			}
			else{

				result = exp('mobile') || exp('applewebkit');

				if( type != 'mobile' ){

					// 移动设备
					if( result ){

						// Ios || Android
						switch( type ){
							case 'ie':
								result = exp('msie');
								break;
							case 'firefox':
								result = exp('mercury') || exp('firefox');
								break;
							case 'chrome':
								result = exp('crios') || exp('chrome');
								break;
							case 'safari':
								result = exp('safari');
								break;
							case 'opera':
								result = exp('opios') || exp('opr');
								break;
						}

					}
					// 电脑设备
					else{

						switch( type ){
							case 'ie':
								result = exp('msie');
								break;
							case 'firefox':
								result = exp('firefox');
								break;
							case 'chrome':
								result = exp('chrome') && !exp('opr');
								break;
							case 'safari':
								result = exp('safari') && !exp('chrome');
								break;
							case 'opera':
								result = exp('opr');
								break;
						}

					}

				}

			}

			return !!result;
		}

		return $.monitor('iphone') ? 'ios' : ( $.monitor('android') ? 'android' : 'other' );
	}

	// Core End
});


/* !!
 * Constant Extend
 * ** *** **** ***** **** *** ** *
 */
$.extend({

	// 环境判断: Iphone
	isIphone: $.monitor('iphone'),

	// 环境判断: Ipad
	isIpad: $.monitor('ipad'),

	// 环境判断: Mac
	isMac: $.monitor('mac'),

	// 环境判断: Android
	isAndroid: $.monitor('android'),

	// 环境判断: Win Phone
	isWinphone: $.monitor('windows mobile'),

	// 花镜判断: 移动设备
	isMobile: $.monitor('mobile'),

	// 浏览器判断: Internet Explorer
	isMsie: $.monitor('ie'),

	// 浏览器判断: Firefox
	isFirefox: $.monitor('firefox'),

	// 浏览器判断: Chrome
	isChrome: $.monitor('chrome'),

	// 浏览器判断: Safari
	isSafari: $.monitor('safari'),

	// 浏览器判断: Opera
	isOpera: $.monitor('opera'),

	// 环境判断: 微信
	isWeixin: $.monitor('weixin'),

	// 环境判断: 友加
	isUplus: $.monitor('uplus')

	// Constant Extend End
});


/* !!
 * Extend
 * ** *** **** ***** **** *** ** *
 */
$.extend({

	// Array To Json
	toJSON: function( array ){

		return function( json ){

			$.each( array, function(index, value){

				json[ $.isNumeric( index ) ? value : index ] = value;

			});

			return json;

		}( {} );

	},

	// 获取对象Data属性
	dataget: function( element ){

		return function( json, element ){

			if( !element.length ){

				return json;

			}

			element.prop('outerHTML').replace(/data-\w+/g, function( attr ){

				json[ attr.substr(5) ] = element.attr( attr );

			});

			return json;

		}( {}, $(element) );

	},

	// 对象比对
	objectMatch: function( origin, compare ){

		var result = { index: -1, item: undefined };

		$.each( origin, function( index, object ){

			if( object === compare ){

				return result = { index: index, item: object }, false;

			}

		});

		return result;

	},

	// 判断字符串
	isString: function( obj ){
		return $.type(obj) === 'string';
	},

	// 判断布尔
	isBoolean: function( obj ){
		return $.type(obj) === 'boolean';
	},

	// 判断方法
	isFunction: function( obj ){
		return $.type(obj) === 'function';
	},

	// 判断JSON
	isJson: function( obj ){
		return $.type(obj) === 'object' && !obj.length && obj.constructor == Object;
	},

	// 编码HTML
	escapeHTML: function( html ){
		return html
				.replace(/</g, '&lt;')
				.replace(/>/g, '&gt;')
				.replace(/"/g, '%22')
				.replace(/'/g, '%27')
				.replace(/\'/g, '"');
	},

	// 解码HTML
	unescapeHTML: function( html ){
		return html
				.replace(/&lt;/g, '<')
				.replace(/&gt;/g, '>')
				.replace(/%22/g, '"')
				.replace(/%27/g, "'");
	}

	// Extend End
});


/* !!
 * Plugin
 * ** *** **** ***** **** *** ** *
 */
$.extend({

	// 模板渲染
	compile: function( obj, html, data, engine ){

		return function( e ){

			return e ? obj.append( e.render( html, { it: data } ) ) : undefined;

		}( _[engine || 'ejs'] );

	},

	// Dot渲染
	temp: function( html, data, callback ){

		return function( result ){
			
			callback = callback || $.noop, callback( result );
		
		}( doT.template( html )( data ) );

	},

	// 多条件判断
	condition: function( variable, condition ){

		switch( variable ){

		}

	},

	// Swiper
	initSwiper: function( swipers, options ){

		var map = [];

		if( $.isJson( swipers ) ){
			options = swipers;
		}

		if( _.Swiper ){

			$( swipers ).each(function(index, swiper){

				swiper = $(swiper)

				// 初始化参数
				, options = options || {}

				// 起始页数
				, options.initialSlide = options.initialSlide || 0

				// 方向: horizontal || vertical
				, options.direction = options.direction || 'horizontal'

				// 速度
				, options.speed = options.speed || 600

				// 循环
				, options.loop = options.loop || true

				// 自动播放
				, options.autoplay = options.autoplay || 6789

				// 分页
				, options.pagination = options.pagination || swiper.find('.swiper-pagination')

				// 分页点击
				, options.paginationClickable = options.paginationClickable || true

				// 自由模式
				, options.freeMode = options.freeMode || false

				// 回调: 首次初始化
				, options.onFirstInit = options.onFirstInit || $.noop

				// 回调: 初始化
				, options.onInit = options.onInit || $.noop;

				// Init
				map.push( new Swiper( swiper, options ) );

			});

		}

		return $.initSwiper ? map : arguments.callee;

	}('[data-swiper]'),

	// 计时器
	timeout: function( options ){

		// 参数容错
		options          = options || {}

		// 回调函数
	  ,	options.callback = options.callback || $.noop

		// 时间间隔
	  ,	options.time     = options.time || 100

		// 计数器更替量
	  ,	options.result   = options.time

		// 初始化执行
	  ,	options.def      = $.type(options.def) === 'boolean' ? options.def : false

		// 计数器
	  ,	options.count    = Math.abs( options.count || 1 )

		// 计时器对象
	  ,	options.timeout

		// 执行动作
	  ,	options.action   = function(){

			// 计数器依据
			if( options.count ){

				options.timeout = _.setTimeout(function(){

					// 回调函数内可返回result, 如为数字, 则可更替计数器当前值
					options.result = options.callback( options );

					// 如result为数字, 则更替计数器
					if( $.isNumeric( options.result ) ){
						options.count = options.result;
					}

					// 递减次数
					--options.count, _.clearTimeout( options.timeout ), options.action();

				}, options.time);

				return;
			}

			// 清除计时器
			_.clearTimeout( options.timeout );
		};

		// 初始化执行
		if( options.def ){
			options.callback( options );
		}

		// 执行动作
		options.action();
	},

	// 弹出层
	popup: function( options ){

		// 参数容错
		options             = options           || {}
		// 于容器内
	  ,	options.container   = options.container || undefined
		// 可视区域
	  ,	options.screen      = {}
		// 可视区域, x坐标
	  ,	options.screen.x    = options.container ? options.container.width()  : $.dom.window.width()
		// 可视区域, y坐标
	  ,	options.screen.y    = options.container ? options.container.height() : $.dom.window.height()
		// 方向
	  ,	options.coor        = options.coor      || {}
		// 方向, x坐标
	  ,	options.coor.x      = options.coor.x    || 'center'
		// 方向, y坐标
	  ,	options.coor.y      = options.coor.y    || 'center'
		// 尺寸
	  ,	options.size        = $.isString( options.size ) ? eval('(' + options.size + ')') : ( options.size || {} )
		// 尺寸, x坐标
	  ,	options.size.w      = options.size.w    || options.screen.x * .8
		// 尺寸, y坐标
	  ,	options.size.h      = options.size.h    || options.screen.y * .6
		// 标题
	  ,	options.title       = options.title     || false
		// 内容
	  , options.content     = options.content   || ''
		// 模式: default | fade | top | left | right | bottom
	  ,	options.mode        = options.mode      || 'default'
		// 速度: slow | normal | fast | number
	  ,	options.speed       = Number( options.speed ) || 300
		// 提交方法: 如submit参数为function, 则显示submit按钮
	  ,	options.submit      = $.isFunction( options.submit ) ? options.submit : false
		// 取消按钮: 布尔
	  ,	options.cancel      = $.isBoolean( options.cancel )  ? options.cancel : true
		// 遮罩层: 布尔
	  ,	options.mask        = $.isBoolean( options.mask )    ? options.mask   : true
		// 回调(特殊): 用于替换submit方法
	  ,	options.callback    = options.callback  || options.submit || $.noop
		// 回调: 打开前
	  ,	options.beforeOpen  = $.isFunction( options.beforeOpen )  ? options.beforeOpen  : $.noop
		// 回调: 打开后
	  ,	options.afterOpen   = $.isFunction( options.afterOpen )   ? options.afterOpen   : $.noop
		// 回调: 关闭前
	  ,	options.beforeClose = $.isFunction( options.beforeClose ) ? options.beforeClose : $.noop
		// 回调: 关闭后
	  ,	options.afterClose  = $.isFunction( options.afterClose )  ? options.afterClose  : $.noop
		// 对象集容错
	  ,	options.element     = options.element   || {}
		// 对象集
	  ,	options.element     = {
	  		// 弹出层
			popup:   $('<div></div>').addClass('popup').addClass('fixed z-max'),
			// 遮罩
			mask:    $('<div></div>').addClass('popup-mask').addClass('screen-max z-max').css('zIndex', '-='+1),
			// 标题
			title:   $('<div></div>').addClass('popup-title').html( options.title ),
			// 内容
			content: $('<div></div>').addClass('popup-content').html( options.content ),
			// 按钮集
			menus:   $('<div></div>').addClass('popup-menu'),
			// 提交按钮
			submit:  $('<button type="submit">' + ($.isString(options.element.submit) ? options.element.submit : '确定') + '</button>'),
			// 取消按钮
			cancel:  $('<button type="button">' + ($.isString(options.element.cancel) ? options.element.cancel : '取消') + '</button>')
		}
		// 中心点
	  ,	options.center = {
			x: options.screen.x / 2,
			y: options.screen.y / 2
		}
		// 移动目标点
	  ,	options.move = {
			x: options.center.x - options.size.w / 2,
			y: options.center.y - options.size.h / 2
		}
		// 初始css标记
	  ,	options.css = {}
		// 对象存储
	  ,	options.it = this

		// 诞生啦: 置入
	  ,	options.born = function(){
			$.dom.body.append( options.element.popup );

			if( options.mask ){
				$.dom.body.append( options.element.mask );
			}
		}
		// 死亡啦: 销毁
	  ,	options.dead = function(){
			options.element.mask.remove(),
			options.element.popup.remove();
		}
		// API: 打开
	  ,	options.it.open = function(){

			// 回调函数 -- 打开前
			options.beforeOpen( options );

			// 置入
			options.born();

			// 预留, 模式
			switch( options.mode ){
				case 'fade':
					break;
				case 'top':
					break;
				case 'left':
					break;
				case 'right':
					break;
				case 'bottom':
					break;
				default:
					options.element.popup.show();
					break;
			}

			// css动画
			options.element.popup
				.animate(
					{
						left: options.move.x
						,top: options.move.y
						,opacity: 1
					},
					options.speed,
					function(){

						// 绑定移除事件
						options.element.cancel.on( $.evt.click, options.it.close );

						// 绑定提交事件
						options.element.submit.on( $.evt.click, function(e){
							options.callback( options );
						});
					}
				);

			// 移除事件拓展
			options.element.mask.on( $.evt.click, options.it.close );

			// 回调函数 -- 打开后
			options.afterOpen( options );
		}
		// API: 关闭
	  ,	options.it.close = function(){

			// 回调函数 -- 关闭前
			options.beforeClose( options );

			// css归位
			options.element.popup.animate( options.css, options.speed, function(){

				// 销毁
				options.dead();

				// 回调函数 -- 关闭后
				options.afterClose( options );
			});
		}
		// API: 初始化(重置)
	  ,	options.it.init = function(){

			if( options.cancel ){
				options.element.cancel.appendTo( options.element.menus );
			}
			if( options.submit ){
				options.element.submit.appendTo( options.element.menus );
			}

			// 结构整理
			options.element.popup
				.append( options.element.title   )
				.append( options.element.content )
				.append( options.element.menus   );

			// 初始化css
			options.css = {
				width:  options.size.w,
				height: options.size.h,
				left:   options.move.x,
				top:    options.move.y
			};

			// 初始化css, 模式
			switch( options.mode ){
				case 'fade':
					options.css.opacity = 0;
					break;
				case 'top':
					options.css.top = 0 - options.size.h;
					break;
				case 'left':
					options.css.left = 0 - options.size.w;
					break;
				case 'right':
					options.css.left = options.screen.x;
					break;
				case 'bottom':
					options.css.top = options.screen.y;
					break;
				default:
					options.element.popup.hide();
					break;
			}

			// 初始css, 打开弹出层, 放出接口
			return options.element.popup.css( options.css ), options.it.open(), options.it;
		};

		// 执行初始化
		return options.it.init();

	},

	// 渲染Popup
	renderPopup: function( elements ){

		$.each(elements, function(i, element){

			var	data = $.dataget( element ),
				option = {
					event: data.event || $.evt.click
				};

			data.mode = data.mode || data.popup;

			data.submit = _[ data.submit ] || undefined;

			$(element).on( option.event, function(){
				$.popup( data );
			});

		});

	},

	// 切换
	tab: function( options ){

		return function( options, api ){

			// 容器
			options.container = options.container || $.dom.document,

			// 按钮
			options.menus = options.container.find( options.menus || '[data-tab-menu]' ),

			// 目标
			options.targets = options.container.find( options.targets || '[data-tab-target]' ),

			// 事件
			options.event = options.event || $.evt.click,

			// 类型
			options.type = options.type || undefined,

			// 速度
			options.speed = options.speed || 600,

			// 初始化执行
			options.def = ( options.def === false ? options.def : ( $.isNumeric( options.def ) ? options.def : 0 ) ),

			// 回调函数
			options.callback = options.callback || $.noop;

			// 接口
			api = {

				show: function( index ){

					switch( options.type ){

						// 渐变
						case 'fade':

							options.targets.fadeOut( options.speed ).eq( index ).fadeIn( options.speed );

							break;

						// 线性
						case 'linear':

							options.targets.slideUp( options.speed ).eq( index ).slideDown( options.speed );

							break;

						// 无效果
						default:

							options.targets.hide().eq( index ).show();

							break;

					}

				},

				effect: function( e ){

					return function( index ){

						if( ~index ){

							return api.show( index ), options.callback( options, api );

						}

					}( $.isNumeric( e ) ? e : $.objectMatch( options.menus, e.target ).index );

				},

				cancel: function( event ){

					options.container.off( options.event, api.effect );

				},

				open: function( index ){

					$.isNumeric( index ) ? api.effect( index ) : options.container.trigger( options.event, api.effect );

				},

				init: function(){

					return options.container.on( options.event, api.effect ), api;

				}

			}

			return api.init( options ), api.open( options.def ), api;

		}( options || {} );

	},

	// 切换
	taber: function( options ){
		options = options || {};

		$( options.container || $.dom.document ).each(function(i, container){

			var option = {};

			option.container = $(container)
		  ,	option.menus     = option.container.find( options.menus || ( options.menus = '[data-menu]' ) )
		  ,	option.contents  = function( contents ){
		  		if( !contents ){
		  			contents = '';
		  			option.menus.length ? $.each( option.menus, function(i, menu){
		  				contents += (i ? ',' : '') + $(menu).attr( options.menus.match(/(\w|\-)+/g)[0] );
		  			}) : ( options.contents = '[data-content]' );
		  		}
		  		return option.container.find( contents );
			}( options.contents )
		  ,	option.active    = options.active || 'active'
		  ,	option.index     = options.index  || 0
		  ,	option.def       = options.def    || true;

			option.menus.on( $.evt.click, function(){
				option.index = option.menus.index( this ),
				option.menus.removeClass( option.active ).eq( option.index ).addClass( option.active ),
				option.contents.hide().eq( option.index ).show();
			});

			if( option.def ){
				option.menus.eq( option.index ).trigger( $.evt.click );
			}

		});
	},

	// Drag（& Drop）
	drag: function( options ){

		return function( options ){

			// 区域 - 施法者
			options.caster = options.caster || $.dom.document,

			// 区域 - 吸法者
			options.sucker = options.sucker || $.dom.document,

			// 对象集
			options.items = options.caster.find( options.items || '[data-drag-item]' ),

			// 启动事件
			options.event = function( event ){

				// 开始
				event.start = event.start || 'dragstart',
				// 结束
				event.end   = event.end   || 'dragend',
				// 之上
				event.enter = event.enter || 'dragenter',
				// 移动
				event.over  = event.over  || 'dragover',
				// 释放
				event.drop  = event.drop  || 'drop';

				return event;

			}( options.event || {} ),

			// 回调函数
			options.callback = function( event, callback ){

				return function( json ){

					$.each( event, function( hand ){

						json[ hand ] = callback[ hand ] || $.noop;

					});

					return json;

				}({});

			}( options.event, options.callback ),

			// 阻止默认行为
			options.clear = function( stop ){

				options.caster.on({

					dragleave: stop,

					drop: stop,

					dragenter: stop,

					dragover: stop

				});

				return arguments.callee;

			}( function(e){ e.preventDefault() } ),

			// Listen On
			options.on = function( item, callback ){

				/* !!
				 * Callback: {
				 * 		start: dragstart,
				 * 		end: dragend,
				 * 		enter: dragenter,
				 * 		over: dragover,
				 * 		drop: drop
				 * }
				 * ----- ----- ----- ----- -----
				 */

				$.each( options.event, function( hand, event ){

					!function( mode, hand ){

						mode ? item.addEventListener( event, hand ) : options.sucker.get(0).addEventListener( event, hand );

					}( ~$.inArray( hand, ['start', 'end'] ), callback[ hand ] || $.noop );

				});

			},

			// Listen Off
			options.off = function( item, callback ){

				$.each( options.event, function( hand, event ){

					!function( mode, hand ){

						mode ? item.removEeventListener( event, hand ) : options.sucker.get(0).removEeventListener( event, hand );

					}( ~$.inArray( hand, ['start', 'end'] ), callback[ hand ] || $.noop );

				});

			},

			// 初始化
			options.init = function(){

				// 每个对象添加监听事件
				$.each( options.items, function( index, item ){

					options.on( ( item.setAttribute('draggable', true), item ), options.callback );

				});

				return arguments.callee;

			}();

		}( options || {} );

	},

	// 拖拽排序
	dragSort: function( options ){

		return function( options, action, item, tag ){

			// 区域 - 施法者
			options.caster = options.caster || $.dom.document,

			// 区域 - 吸法者
			options.sucker = options.sucker || $.dom.document,

			// 距离
			options.distance = options.distance || 30,

			// 回调 - 开始
			options.onStart = options.onStart || $.noop,

			// 回调 - 结束
			options.onEnd = options.onEnd || $.noop;

			// 回调函数
			options.callback = {

				start: function( e ){

					item = function( item ){

						return tag = item.tagName, $( item ); // .css( item, options.sucker );

					}( e.target );

					options.onStart( item, e );

					// options.caster.css('position', 'relative');

					// options.sucker.append( item );

				},

				end: function( e ){

					if( !item || !tag ){ return }

					options.onEnd( item, e );

				},

				over: function( e ){

					if( !item || !tag ){ return }

					action.move( item, e, options.sucker );

				},

				drop: function( e ){

					if( !item || !tag ){ return }

					// action.sort();

				}

			};

			$.drag( options );

		}(

			// 参数
			options || {},

			// 方法
			{
				// 样式
				css: function( item, container ){

					return function( item ){

						return item.css({

							position: 'absolute',

							left: item.offset().left - container.offset().left,

							top: item.offset().top - container.offset().top,

							margin: 0,

							padding: 0,

							zIndex: item.css('zIndex') || 0 // 2147483584

						});

					}( $(item) );

				},

				// 移动
				move: function( item, e, container ){

					var

						offset = {

							left: container.offset().left,

							top: container.offset().top

						},

						index = Math.floor( ( e.clientY - offset.top + options.distance / 2 ) / options.distance ),

						target = container.find( item.get(0).tagName + ':eq(' + index + ')' );

					index ? item.insertAfter( target ) : item.insertBefore( target );

				},

				// 排序
				sort: function( item, tag, e ){

					if( tag == item.get(0).tagName ){

						// item.insertAfter( e.target );

					}

					if( e.target.tagName == options.sucker.get(0).tagName ){

						// item.prependTo( options.sucker );

					}

				}
			}

		);

	},

	// 自动拉取
	autoPull: function( options ){

		// 参数
		options = options || {}

		// 默认执行
		, options.def = $.isBoolean( options.def ) ? options.def : true
		
		// 方向: 0 => x, 1 => y
		, options.dir = $.isNumeric( options.dir ) ? options.dir : 1

		// 容器
		, options.container = options.container || $.dom.window

		// 布景
		, options.scenery = options.scenery || ( options.container == $.dom.window ? $.dom.window : options.container.closest(':relative') )

		// 对象
		, options.obj = options.obj || undefined

		// 偏移量
		, options.offset = $.isNumeric( options.offset ) ? options.offset : 30
		
		// Url: Html
		, options.html = options.html || ''
		
		// Url: Data
		, options.data = options.data || ''

		// Event
		, options.evt = options.evt || $.evt.scroll

		// Callback: Ready
		, options.ready = options.ready || $.noop

		// Callback: Complete
		, options.complete = options.complete || $.noop

		// Callback: Stop
		, options.stop = options.stop || $.noop

		// Ajax
		, options.ajax = function(){

			$.ajax({
				async: false,
				cache: false,
				type: 'get',
				url: options.data,
				beforeSend: options.ready,
				success: function( data ){

					$.get( options.html, function( html ){

						$.temp( html, data, function( html ){

							options.obj.append( html ), options.complete();

							options.stop() ? options.cancel() : $.noop;

						});

					});

				}
			});

		}

		// Action
		, options.action = function(){

			!function( distance, deviate, shaft ){

					[
						// x
						function(){

							if( ( deviate.x + distance.w + options.offset ) > shaft.w ){
								options.ajax();
							}

						},
						// y
						function(){

							if( ( deviate.y + distance.h + options.offset ) > shaft.h ){
								options.ajax();
							}

						}
					]
					[ options.dir ]();

				}
				(
					{
						w: $.dom.window.width(),
						h: $.dom.window.height()
					},
					{
						x: $.dom.window.scrollLeft(),
						y: $.dom.window.scrollTop()
					},
					{
						w: $.dom.document.width(),
						h: $.dom.document.height()
					}
				);

		}

		// Cancel
		, options.cancel = function(){

			options.container.off( options.evt, options.action );

		}

		// Init
		, options.init = function(){

			options.container.on( options.evt, options.action );

			if( options.def ){

				options.container.trigger( options.evt, options.action );

			}

			return arguments.callee;

		}();
	},

	// 结果
	result: function( result ){
		return result = result || {}, result.error ? ( alert( result.msg || '错误' ), false ) : true;
	}

	// Plugin End
});


})(window, jQuery);